<?xml version="1.0" encoding="UTF-8"?>

<syntax name="name.insane-dreamer.Espresso.Syntax.Programming.Rails">
  <zones>
	  <include collection="keyword.control" />
	  <include collection="container.class.controller" />
	  <include collection="container.class.model" />
	  <include collection="container.class.routes" />
	  <include collection="container.class.test_unit" />
	  <include collection="container.class.test_functional" />
	  <include syntax="name.elliottcable.Espresso.Syntax.Programming.Ruby" />
  </zones>
   
  
  <library>
      <collection name="keyword.control">
			<zone name="keyword.control.active_record"> 
				<expression>\b(named_scope|after_create|after_destroy|after_save|after_update|after_validation|after_validation_on_create|after_validation_on_update|before_create|before_destroy|before_save|before_update|before_validation|before_validation_on_create|before_validation_on_update|composed_of|belongs_to|has_one|has_many|has_and_belongs_to_many|validate|validate_on_create|validates_numericality_of|validate_on_update|validates_acceptance_of|validates_associated|validates_confirmation_of|validates_each|validates_format_of|validates_inclusion_of|validates_exclusion_of|validates_length_of|validates_presence_of|validates_size_of|validates_uniqueness_of|attr_protected|attr_accessible|attr_readonly|attr_accessor)\b</expression>
			</zone>
		    <zone name="keyword.control.active_support">
	            <expression>\b(alias_method_chain|alias_attribute|delegate|cattr_accessor|mattr_accessor|returning)\b</expression>
	        </zone>
			<zone name="keyword.control.action_pack">
	            <expression>\b(before_filter|skip_before_filter|skip_after_filter|after_filter|around_filter|filter|filter_parameter_logging|layout|require_dependency|render|render_action|render_text|render_file|render_template|render_nothing|render_component|render_without_layout|rescue_from|url_for|redirect_to|redirect_to_path|redirect_to_url|respond_to|helper|helper_method|model|service|observer|serialize|scaffold|verify|hide_action)\b</expression>
	        </zone>
	  </collection>
	
	  <collection name="container.class.controller">
		<zone name="container.class.controller">
            <starts-with>
                <expression>(^\s*)(?=class\s+(([.a-zA-Z0-9_:]+Controller\b(\s*&lt;\s*[.a-zA-Z0-9_:]+)?)|(&lt;&lt;\s*[.a-zA-Z0-9_:]+)))(?!.+\bend\b)</expression>
            </starts-with>
            <ends-with>
                <expression>^\1(?=end)\b</expression>
            </ends-with>
            <subzones>
                <include collection="keyword.control" />
                <include syntax="name.elliottcable.Espresso.Syntax.Programming.Ruby"/>
                <include syntax="self"/>
            </subzones>
        </zone>
        </collection>

    	  <collection name="container.class.test_functional">
    		<zone name="container.class.test_functional">
            <starts-with>
            <expression>(^\s*)(?=class\s+.+ActionController::TestCase)</expression>
            </starts-with>
            <ends-with>
                <expression>^\1(?=end)\b</expression>
            </ends-with>
            <subzones>
                <include collection="keyword.control" />
                <include syntax="name.elliottcable.Espresso.Syntax.Programming.Ruby"/>
                <include syntax="self"/>
            </subzones>
        </zone>
        </collection>

  	  <collection name="container.class.test_unit">
    		<zone name="container.class.test_unit">
            <starts-with>
            <expression>(^\s*)(class\s+.+ActiveSupport::TestCase)</expression>
            </starts-with>
            <ends-with>
                <expression>^\1(?=end)\b</expression>
            </ends-with>
            <subzones>
                <include collection="keyword.control" />
                <include syntax="name.elliottcable.Espresso.Syntax.Programming.Ruby"/>
                <include syntax="self"/>
            </subzones>
        </zone>
        </collection>

        <collection name="container.class.model">
        <zone name="container.class.model">
            <starts-with>
                <expression>(^\s*)(?=class\s+.+ActiveRecord::Base)</expression>
            </starts-with>
            <ends-with>
                <expression>^\1(?=end)\b</expression>
            </ends-with>
            <subzones>
                <include collection="keyword.control" />
                <include syntax="name.elliottcable.Espresso.Syntax.Programming.Ruby"/>
                <include syntax="self"/>
            </subzones>
        </zone>
	  </collection>
	
        <collection name="container.class.routes">
        <zone name="container.class.routes">
            <starts-with>
                <expression>(^\s*)(?=ActionController::Routing::Routes.*$)</expression>
            </starts-with>
            <ends-with>
                <expression>^\1(?=end)\b</expression>
            </ends-with>
            <subzones>
                <include collection="keyword.control" />
                <include syntax="name.elliottcable.Espresso.Syntax.Programming.Ruby"/>
                <include syntax="self"/>
            </subzones>
        </zone>
	  </collection>

        <collection name="container.class.routes">
        <zone name="container.class.routes">
            <starts-with>
                <expression>(^\s*)(?=ActionController::Routing::Routes.*$)</expression>
            </starts-with>
            <ends-with>
                <expression>^\1(?=end)\b</expression>
            </ends-with>
            <subzones>
                <include collection="keyword.control" />
                <include syntax="name.elliottcable.Espresso.Syntax.Programming.Ruby"/>
                <include syntax="self"/>
            </subzones>
        </zone>
	  </collection>

  </library>
</syntax>
